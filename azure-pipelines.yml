pool:
  vmImage: 'windows-latest'

variables:
- group: 'code-sign-config'
- group: 'dotnet-config'
- group: 'github-config'

stages:

- stage: versioning
  displayName: Get Version
  jobs:
  - job: get_version
    displayName: Get Version from Git tags
    steps:
    - checkout: self
      fetchTags: true
      fetchDepth: 0
    - task: PowerShell@2
      displayName: 'Generate Semantic Version'
      name: gitver
      inputs:
        filePath: 'azure-gitversion.ps1'
        failOnStderr: true
        pwsh: true

- stage: build
  displayName: Build Application
  dependsOn: versioning
  variables:
    SemVersion: $[ stageDependencies.versioning.get_version.outputs['gitver.SemVersion'] ]
    MajorVersion: $[ stageDependencies.versioning.get_version.outputs['gitver.MajorVersion'] ]
    MinorVersion: $[ stageDependencies.versioning.get_version.outputs['gitver.MinorVersion'] ]
    PatchVersion: $[ stageDependencies.versioning.get_version.outputs['gitver.PatchVersion'] ]  
  jobs:
  - job: create_setups
    displayName: Build, Publish and Sign
    steps:
    - checkout: self
    - task: DownloadSecureFile@1
      displayName: 'Download Client Authentication Certificate'
      name: SM_CLIENT_CERT_FILE
      inputs:
        secureFile: ClientCert.p12
    - task: SSMClientToolsSetup@1
      displayName: 'Setup DigiCert Tools'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        APIKey: '$(SM_API_KEY)'
    - task: PowerShell@2
      displayName: 'Prepare DigiCert Code Signing'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT_FILE.secureFilePath)
      inputs:
        targetType: 'inline'
        script: |
          $env:PATH += ';C:\Program Files\DigiCert\DigiCert Keylocker Tools'
          smctl credentials save $(SM_API_KEY) $(SM_CLIENT_CERT_PASSWORD)
          smctl windows certsync --keypair-alias=$(SM_KEYPAIR_ALIAS)
        failOnStderr: true
        pwsh: true
    - task: Assembly-Info-NetCore@2
      displayName: 'Apply Assembly Infos'
      inputs:
        Path: '$(Build.SourcesDirectory)'
        FileNames: '**/*.csproj'
        InsertAttributes: true
        FileEncoding: 'auto'
        WriteBOM: false
        VersionNumber: '$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildId)'
        FileVersionNumber: '$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildId)'
        InformationalVersion: '$(SemVersion)'
        LogLevel: 'verbose'
        FailOnWarning: false
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '*.sln'
        feedsToUse: 'select'
        vstsFeed: 'b0890edd-bcca-4a1c-b63c-d22daf6e4407/24f47e68-5eca-4ba8-8ab3-905662347d75'
    - task: DotNetCoreCLI@2
      displayName: 'Publish x64'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/Enbrea.Cli/Enbrea.Cli.csproj'
        arguments: '/p:PublishProfile=x64 /p:Version=$(SemVersion)'
        zipAfterPublish: false
        modifyOutputPath: false
    - task: DotNetCoreCLI@2
      displayName: 'Publish x86'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/Enbrea.Cli/Enbrea.Cli.csproj'
        arguments: '/p:PublishProfile=x86 /p:Version=$(SemVersion)'
        zipAfterPublish: false
        modifyOutputPath: false
    - task: DotNetCoreCLI@2
      displayName: 'Publish portable'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/Enbrea.Cli/Enbrea.Cli.csproj'
        arguments: '/p:PublishProfile=Portable /p:Version=$(SemVersion)'
        zipAfterPublish: false
        modifyOutputPath: false
    - task: PowerShell@2
      displayName: 'Sign EXE files'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        SM_CLIENT_CERT_FILE : $(SM_CLIENT_CERT_FILE.secureFilePath)
        SM_HOST : $(SM_HOST)
      inputs:
        targetType: 'inline'
        script: |
          $env:PATH += ';C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64'
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) $(Build.SourcesDirectory)/src/Enbrea.Cli/bin/Publish/win-x64/Enbrea.exe
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) $(Build.SourcesDirectory)/src/Enbrea.Cli/bin/Publish/win-x86/Enbrea.exe
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) $(Build.SourcesDirectory)/src/Enbrea.Cli/bin/Publish/portable/Enbrea.exe
        failOnStderr: true
        pwsh: true
    - task: DotNetCoreCLI@2
      displayName: 'Build MSI Setup x64'
      inputs:
        command: 'build'
        projects: 'setup/Enbrea.Cli.Setup.wixproj'
        arguments: '-c $(BuildConfiguration) -p:Platform=x64'
    - task: DotNetCoreCLI@2
      displayName: 'Build MSI Setup x86'
      inputs:
        command: 'build'
        projects: 'setup/Enbrea.Cli.Setup.wixproj'
        arguments: '-c $(BuildConfiguration) -p:Platform=x86'
    - task: PowerShell@2
      displayName: 'Copy MSI files'
      inputs:
        targetType: 'inline'
        script: |
          Copy-Item -Path $(Build.SourcesDirectory)/setup/bin/x64/Release/de-DE/enbrea.cli-x64.msi -Destination  $(Build.ArtifactStagingDirectory)/enbrea.cli-x64-de.msi
          Copy-Item -Path $(Build.SourcesDirectory)/setup/bin/x64/Release/en-US/enbrea.cli-x64.msi -Destination  $(Build.ArtifactStagingDirectory)/enbrea.cli-x64-en.msi
          Copy-Item -Path $(Build.SourcesDirectory)/setup/bin/x86/Release/de-DE/enbrea.cli-x86.msi -Destination  $(Build.ArtifactStagingDirectory)/enbrea.cli-x86-de.msi
          Copy-Item -Path $(Build.SourcesDirectory)/setup/bin/x86/Release/en-US/enbrea.cli-x86.msi -Destination  $(Build.ArtifactStagingDirectory)/enbrea.cli-x86-en.msi
        failOnStderr: true
        pwsh: true
    - task: PowerShell@2
      displayName: 'Sign MSI files'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      env:
        SM_CLIENT_CERT_FILE : $(SM_CLIENT_CERT_FILE.secureFilePath)
        SM_HOST : $(SM_HOST)
      inputs:
        targetType: 'inline'
        script: |
          $env:PATH += ';C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64'
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) /d "Enbrea CLI" $(Build.ArtifactStagingDirectory)/enbrea.cli-x64-de.msi
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) /d "Enbrea CLI" $(Build.ArtifactStagingDirectory)/enbrea.cli-x64-en.msi
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) /d "Enbrea CLI" $(Build.ArtifactStagingDirectory)/enbrea.cli-x86-de.msi
          signtool.exe sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /sha1 $(SM_CERT_FINGERPRINT) /d "Enbrea CLI" $(Build.ArtifactStagingDirectory)/enbrea.cli-x86-en.msi
        failOnStderr: true
        pwsh: true
    - task: ArchiveFiles@2
      displayName: 'Create Zip for portable'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Enbrea.Cli/bin/Publish/portable/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/enbrea.cli-portable.zip'
        replaceExistingArchive: true
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: github
  displayName: Publish Source
  dependsOn: build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: push_to_github
    displayName: Push Source to GitHub
    steps:
    - checkout: self
      fetchTags: true
      fetchDepth: 0
    - task: PowerShell@2
      displayName: 'Push to GitHub'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |

          $ErrorActionPreference = 'Stop'

          try {
            
            # Configure Git identity
            git config user.name  'azure-devops-bot'
            git config user.email 'azuredevops@stueber.nomail'

            # Add 'github' remote
            git remote add github "https://$($env:PAT)@github.com/enbrea/enbrea.cli.git"

            # Fetch remote main if it exists (ok to fail if repo is empty)
            git fetch --prune github main
            $fetchCode = $LASTEXITCODE

            # If remote branch exists, only push when remote is an ancestor of HEAD (fast-forward safe)
            if ($fetchCode -eq 0) {
              git merge-base --is-ancestor github/main HEAD
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Remote has commits not in local (or histories diverged). Aborting push."
              }
            }

            # Push only the main branch (fast-forward or create remote if missing)
            git push --tags github HEAD:refs/heads/main
            if ($LASTEXITCODE -ne 0) { throw "git push failed with exit code $LASTEXITCODE" }
            
          }
          finally {
            
            # Remove the remote so the PAT isn't left in .git/config
            git remote remove github 2>$null | Out-Null
            
          }
      env:
        PAT: $(PAT)

- stage: deploy
  displayName: Deploy
  dependsOn: [github, versioning] 
  variables:
    SemVersion: $[ stageDependencies.versioning.get_version.outputs['gitver.SemVersion'] ]
  jobs:
  - job: create_github_release
    displayName: Create GitHub Release
    steps:
    - download: current
      artifact: drop
    - task: GitHubRelease@1
      displayName: 'Create GitHub Release'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        gitHubConnection: 'stuebersystems'
        repositoryName: 'enbrea/enbrea.cli'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        title: '$(SemVersion) Release of Enbrea CLI'
        addChangeLog: false
        assetUploadMode: 'replace'
        assets: |                 
          $(Pipeline.Workspace)/drop/*.msi
          $(Pipeline.Workspace)/drop/*-portable.zip